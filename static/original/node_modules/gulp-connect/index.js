// Generated by CoffeeScript 1.7.1
var ConnectApp, connect, es, http, liveReload, lr, opt, tiny_lr, util;

es = require("event-stream");

util = require("gulp-util");

http = require("http");

connect = require("connect");

liveReload = require("connect-livereload");

tiny_lr = require("tiny-lr");

opt = {};

lr = null;

ConnectApp = (function() {
  function ConnectApp(options) {
    opt = options;
    opt.port = opt.port || "1337";
    opt.root = opt.root || ["app"];
    opt.host = opt.host || "localhost";
    if (opt.open) {
      this.oldMethod("open");
    }
    this.server();
  }

  ConnectApp.prototype.server = function() {
    var app, middleware, server;
    middleware = this.middleware();
    app = connect.apply(null, middleware);
    server = http.createServer(app);
    app.use(connect.directory(typeof opt.root === "object" ? opt.root[0] : opt.root));
    server.listen(opt.port);
    this.log("Server started http://" + opt.host + ":" + opt.port);
    if (opt.livereload) {
      tiny_lr.Server.prototype.error = function() {};
      lr = tiny_lr();
      lr.listen(opt.livereload.port);
      return this.log("LiveReload started on port " + opt.livereload.port);
    }
  };

  ConnectApp.prototype.middleware = function() {
    var middleware;
    middleware = opt.middleware ? opt.middleware.call(this, connect, opt) : [];
    if (opt.livereload) {
      if (typeof opt.livereload === "boolean") {
        opt.livereload = {};
      }
      if (!opt.livereload.port) {
        opt.livereload.port = 35729;
      }
      middleware.push(liveReload({
        port: opt.livereload.port
      }));
    }
    if (typeof opt.root === "object") {
      opt.root.forEach(function(path) {
        return middleware.push(connect["static"](path));
      });
    }
    return middleware;
  };

  ConnectApp.prototype.log = function(text) {
    this.text = text;
    return util.log(util.colors.green(this.text));
  };

  ConnectApp.prototype.logWarning = function(text) {
    this.text = text;
    return util.log(util.colors.yellow(this.text));
  };

  ConnectApp.prototype.oldMethod = function(type) {
    var text;
    text = 'does not work in gulp-connect v 2.*. Please read "readme" https://github.com/AveVlad/gulp-connect';
    switch (type) {
      case "open":
        return this.logWarning("Option open " + text);
    }
  };

  return ConnectApp;

})();

module.exports = {
  server: function(options) {
    if (options == null) {
      options = {};
    }
    return new ConnectApp(options);
  },
  reload: function() {
    return es.map(function(file, callback) {
      if (opt.livereload && typeof lr === "object") {
        lr.changed({
          body: {
            files: file.path
          }
        });
      }
      return callback(null, file);
    });
  }
};
